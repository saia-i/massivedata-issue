package com.example.demo.repository;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.example.demo.domain.CategoryDetail;
import com.example.demo.domain.Item;

/**
 * 商品情報を操作するリポジトリ.
 * 
 * @author inagakisaia
 *
 */
@Repository
public class ItemRepository {

	@Autowired
	private NamedParameterJdbcTemplate template;

	private static final RowMapper<Item> ITEM_ROW_MAPPER = new BeanPropertyRowMapper<>(Item.class);

	private static final RowMapper<Item> ITEM_CATEGORY_ROW_MAPPER = (rs, i) -> {
		Item item = new Item();
		item.setId(rs.getInt("id"));
		item.setName(rs.getString("name"));
		item.setConditionId(rs.getInt("condition_id"));
		CategoryDetail categoryDetail = new CategoryDetail();
		item.setCategoryDetail(categoryDetail);
		categoryDetail.setSmallId(rs.getInt("small_id"));
		categoryDetail.setSmallName(rs.getString("small_name"));
		categoryDetail.setPath(rs.getString("category_path"));
		item.setBrand(rs.getString("brand"));
		item.setPrice(rs.getInt("price"));
		item.setShipping(rs.getInt("shipping"));
		item.setDescription(rs.getString("description"));
		item.setCount(rs.getInt("count"));

		return item;
	};

	/**
	 * 商品情報を挿入します.
	 * 
	 * @param item 商品情報
	 * @return 採番されたID
	 */
	public Integer insertNewItem(Item item) {
		String sql = "INSERT INTO items (name,condition_id,category_id,brand,price,description) VALUES(:name,:conditionId,:categoryId,:brand,:price,:description);";
		SqlParameterSource param = new BeanPropertySqlParameterSource(item);

		// 採番されたidを取得する
		KeyHolder keyHolder = new GeneratedKeyHolder();
		String keyColumnNames[] = { "id" };
		template.update(sql, param, keyHolder, keyColumnNames);
		Integer id = keyHolder.getKey().intValue();

		return id;
	}

	/**
	 * 商品情報を更新します.
	 * 
	 * @param item 商品情報
	 */
	public void update(Item item) {
		String sql = "UPDATE items SET name=:name,condition_id=:conditionId,category_id=:categoryId,brand=:brand,price=:price,shipping=:shipping,description=:description WHERE id=:id;";
		SqlParameterSource param = new BeanPropertySqlParameterSource(item);
		template.update(sql, param);
	}

	/**
	 * 指定された開始位置から30件の商品情報を取得します.
	 * 
	 * @param startId 開始位置
	 * @return 検索された商品情報
	 */
	public List<Item> findPartOfContent(int startId) {
		StringBuilder sql = new StringBuilder(
				"SELECT i.id id,i.name name,i.condition_id condition_id ,i.category_id small_id,");
		sql.append("c.name small_name,c.path category_path,i.brand brand,");
		sql.append("i.price price,i.shipping shipping,i.description description,i.count count ");
		sql.append(
				"FROM (SELECT id,name,condition_id,category_id,brand,price,shipping,description,count(1) over() AS count ");
		sql.append("FROM items ORDER BY id DESC LIMIT 30 OFFSET :startId) i ");
		sql.append("LEFT OUTER JOIN categories c ON i.category_id=c.category_id ORDER BY i.id DESC;");
		SqlParameterSource param = new MapSqlParameterSource().addValue("startId", startId);
		List<Item> itemList = template.query(sql.toString(), param, ITEM_CATEGORY_ROW_MAPPER);
		return itemList;
	}

	/**
	 * IDから商品情報を一件検索します.
	 * 
	 * @param itemId 商品ID
	 * @return 検索された商品情報
	 */
	public Item loadJoinCategory(int itemId) {
		StringBuilder sql = new StringBuilder(
				"SELECT i.id id,i.name name,i.condition_id condition_id ,i.category small_id,");
		sql.append(
				"c1.name small_name,c2.id middle_id,c2.name middle_name,c3.id big_id,c3.name big_name,i.brand brand,");
		sql.append("i.price price,i.shipping shipping,i.description description,count(1) over() AS count ");
		sql.append(
				"FROM (SELECT id,name,condition_id,category,brand,price,shipping,description FROM items WHERE id=:itemId) i ");
		sql.append("LEFT OUTER JOIN category c1 ON i.category=c1.id LEFT OUTER JOIN category c2 ON c1.parent=c2.id ");
		sql.append("LEFT OUTER JOIN category c3 ON c2.parent=c3.id;");
		SqlParameterSource param = new MapSqlParameterSource().addValue("itemId", itemId);
		Item item = template.queryForObject(sql.toString(), param, ITEM_CATEGORY_ROW_MAPPER);
		return item;
	}

	public List<Item> search(String categoryPath,String name, String brand,int startId) {
		System.out.println("categoryPath : "+categoryPath);
		System.out.println("name : "+name);
		System.out.println("brand : "+brand);
		System.out.println("startId : "+startId);
		StringBuilder sql = new StringBuilder("SELECT i.id id,i.name name,i.condition_id condition_id,i.category_id small_id,");
		sql.append("c.name small_name,c.path category_path,i.brand brand,i.price price,i.shipping shipping,");
		sql.append("i.description description,count(1) over() AS count ");
		sql.append("FROM items i LEFT OUTER JOIN categories c ON i.category_id=c.category_id ");
		sql.append("WHERE c.path LIKE :categoryPath AND i.name ILIKE :name AND i.brand ILIKE :brand ORDER BY i.id DESC ");
		sql.append("LIMIT 30 OFFSET :startId");
		SqlParameterSource param = new MapSqlParameterSource().addValue("categoryPath", categoryPath+"%")
				.addValue("name", "%" + name + "%").addValue("brand", "%" + brand + "%").addValue("startId", startId);
		List<Item> itemList = template.query(sql.toString(), param, ITEM_CATEGORY_ROW_MAPPER);
		return itemList;
	}




	/**
	 * ブランド名から商品情報を完全一致検索し、開始位置から30件取得します.
	 * 
	 * @param brand   ブランド名
	 * @param startId 開始位置
	 * @return 検索された商品情報
	 */
	public List<Item> findByBrand(String brand, int startId) {
		StringBuilder sql = new StringBuilder(
				"SELECT i.id id,i.name name,i.condition_id condition_id ,i.category_id small_id,");
		sql.append("c.name small_name,c.path category_path,i.brand brand,");
		sql.append("i.price price,i.shipping shipping,i.description description,i.count count ");
		sql.append(
				"FROM (SELECT id,name,condition_id,category_id,brand,price,shipping,description,count(1) over() AS count ");
		sql.append("FROM items WHERE brand=:brand ORDER BY id DESC LIMIT 30 OFFSET :startId) i ");
		sql.append("LEFT OUTER JOIN categories c ON i.category_id=c.category_id ORDER BY i.id DESC;");
		SqlParameterSource param = new MapSqlParameterSource().addValue("startId", startId).addValue("brand", brand);
		List<Item> itemList = template.query(sql.toString(), param, ITEM_CATEGORY_ROW_MAPPER);
		return itemList;
	}

}
