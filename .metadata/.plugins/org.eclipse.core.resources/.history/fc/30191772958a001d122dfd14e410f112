package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.domain.Big;
import com.example.demo.domain.Category;
import com.example.demo.domain.CategoryDetail;
import com.example.demo.domain.Item;
import com.example.demo.domain.Middle;
import com.example.demo.domain.Small;
import com.example.demo.repository.CategoryRepository;
import com.example.demo.repository.ItemRepository;

@Service
public class ShowItemService {

	@Autowired
	private ItemRepository itemRepository;

	@Autowired
	private CategoryRepository categoryRepository;

	public List<Item> showList(int startId) {

		List<Item> itemList = itemRepository.findPartOfContent(startId);
		return itemList;
	}

	public int count() {
		int count = itemRepository.count();
		return count;
	}

	public Category loadCategory(int id) {
		Category category = categoryRepository.load(id);
		return category;
	}

	public List<Item> showItemOfSmallCategory(Integer category, String name, String brand, int startId) {
		List<Item> itemList = itemRepository.searchItemOfSmallCategory(category, name, brand, startId);
		return itemList;
	}

	public List<Big> findBigAll() {
		List<Big> bigList = categoryRepository.findBigAll();
		return bigList;
	}

	public List<Item> showItemOfMiddleCategory(Integer category, String name, String brand, int startId) {
		List<Item> itemList = itemRepository.searchItemOfMiddleCategory(category, name, brand, startId);
		List<Item> itemCategoryList = new ArrayList<>();
		for (Item item : itemList) {
			if(item.getCategory()!=null) {
				CategoryDetail categoryDetail = categoryRepository.parentFindById(item.getCategory());
				item.setCategoryDetail(categoryDetail);
				itemCategoryList.add(item);
			}
		}
		return itemCategoryList;
	}

	public List<Item> showItemOfBigCategory(Integer category, String name, String brand, int startId) {
		List<Item> itemList = itemRepository.searchItemOfBigCategory(category, name, brand, startId);
		List<Item> itemCategoryList = new ArrayList<>();
		for (Item item : itemList) {
			if(item.getCategory()!=null) {
				CategoryDetail categoryDetail = categoryRepository.parentFindById(item.getCategory());
				item.setCategoryDetail(categoryDetail);
				itemCategoryList.add(item);
			}
		}
		return itemCategoryList;
	}

	public List<Item> showItemByNameAndBrand(String name, String brand, int startId) {
		List<Item> itemList = itemRepository.searchByNameAndBrand(name, brand, startId);
		List<Item> itemCategoryList = new ArrayList<>();
		for (Item item : itemList) {
			if(item.getCategory()!=null) {
				CategoryDetail categoryDetail = categoryRepository.parentFindById(item.getCategory());
				item.setCategoryDetail(categoryDetail);
				itemCategoryList.add(item);
			}
		}
		return itemCategoryList;
	}

	public int countItemByMiddleCategory(Integer category, String name, String brand) {
		int count = itemRepository.countItemByMiddleCategory(category, name, brand);
		return count;
	}

	public int countItemBySmallCategory(Integer category, String name, String brand) {
		int count = itemRepository.countItemBySmallCategory(category, name, brand);
		return count;
	}

	public int countItemByBigCategory(Integer category, String name, String brand) {
		int count = itemRepository.countItemByBigCategory(category, name, brand);
		return count;
	}

	public int countItemByNameAndBrand(String name, String brand) {
		int count = itemRepository.CountItemByNameAndBrand(name, brand);
		return count;
	}

	public List<Middle> showMiddleListByParent(int parentId) {
		List<Middle> middleList = categoryRepository.findMiddleByParent(parentId);
		return middleList;
	}

	public List<Small> showSmallListByParent(int parentId) {
		List<Small> smallList = categoryRepository.findSmallByParent(parentId);
		return smallList;
	}

	public List<Item> showItemByCategoryName(String name, int startId) {
		List<Item> itemList = itemRepository.findByFuzzyCategoryName(name, startId);
		List<Item> itemCategoryList = new ArrayList<>();
		for (Item item : itemList) {
			if (item.getCategory() != null) {
				CategoryDetail categoryDetail = categoryRepository.parentFindById(item.getCategory());
				item.setCategoryDetail(categoryDetail);
				itemCategoryList.add(item);
			}
		}
		return itemCategoryList;
	}

	public int countOfFuzzyCategoryName(String name) {
		int count = itemRepository.countOfFuzzyCategoryName(name);
		return count;
	}

	public List<Item> showItemByBrand(String brand, int startId) {
		List<Item> itemList = itemRepository.findByBrand(brand, startId);
		List<Item> itemCategoryList = new ArrayList<>();
		for (Item item : itemList) {
			if (item.getCategory() != null) {
				CategoryDetail categoryDetail = categoryRepository.parentFindById(item.getCategory());
				item.setCategoryDetail(categoryDetail);
				itemCategoryList.add(item);
			}
		}
		return itemCategoryList;
	}

	public int countByBrand(String brand) {
		int count = itemRepository.countByBrand(brand);
		return count;
	}
}
