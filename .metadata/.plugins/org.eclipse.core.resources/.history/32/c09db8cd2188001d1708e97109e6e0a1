package com.example.demo.repository;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.example.demo.domain.Item;
import com.example.demo.domain.Original;

@Repository
public class ItemRepository {

	@Autowired
	private NamedParameterJdbcTemplate template;

	private static final RowMapper<Item> ITEM_ROW_MAPPER = new BeanPropertyRowMapper<>(Item.class);

	private static final RowMapper<Original> ORIGINAL_ROW_MAPPER = new BeanPropertyRowMapper<>(Original.class);

	public Integer insertNewItem(Item item) {
		String sql = "INSERT INTO items (name,condition_id,category,brand,price,description) VALUES(:name,:conditionId,:category,:brand,:price,:description);";
		SqlParameterSource param = new BeanPropertySqlParameterSource(item);

		// 採番されたidを取得する
		KeyHolder keyHolder = new GeneratedKeyHolder();
		String keyColumnNames[] = { "id" };
		template.update(sql, param, keyHolder, keyColumnNames);
		Integer id = keyHolder.getKey().intValue();

		return id;
	}

	public Integer insert(Item item) {
		String sql = "INSERT INTO items (name,condition_id,category,brand,price,shipping,description) VALUES(:name,:conditionId,:category,:brand,:price,:shipping,:description);";
		SqlParameterSource param = new BeanPropertySqlParameterSource(item);

		// 採番されたidを取得する
		KeyHolder keyHolder = new GeneratedKeyHolder();
		String keyColumnNames[] = { "id" };
		template.update(sql, param, keyHolder, keyColumnNames);
		Integer id = keyHolder.getKey().intValue();

		return id;
	}


	public List<Item> findAllJoinOriginal() {
		String sql = "SELECT o.id,o.name,o.condition_id,c.id category,o.brand,o.price,o.shipping,o.description FROM original o LEFT OUTER JOIN category c ON o.category_name=c.name_all ;";
		template.getJdbcTemplate().setFetchSize(5000);
		List<Item> itemList = template.query(sql, ITEM_ROW_MAPPER);
		return itemList;
	}



}
