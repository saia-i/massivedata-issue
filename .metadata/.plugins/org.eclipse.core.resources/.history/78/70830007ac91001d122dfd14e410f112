package com.example.demo.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doReturn;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.example.demo.domain.Big;
import com.example.demo.domain.Middle;
import com.example.demo.domain.Small;
import com.example.demo.form.InsertItemForm;
import com.example.demo.service.ItemInsertService;
import com.example.demo.service.SelectCategoryService;
import com.example.demo.service.ShowDetailService;

@SpringBootTest
public class ItemInsertControllerTest {

	@MockBean
	private ItemInsertService insertService;

	@MockBean
	private ShowDetailService showDetailService;

	@MockBean
	private SelectCategoryService selectCategoryService;

	private MockMvc mockMvc;

	@Autowired
	WebApplicationContext webApplicationContext;

	@BeforeEach
	public void setup() {
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
	}

	@Test
	@DisplayName("/itemInsert/を呼び出した場合")
	public void indexSuccess() throws Exception {
		List<Big> bigList = new ArrayList<>();
		doReturn(bigList).when(selectCategoryService).findBigAll();

		MvcResult result=this.mockMvc.perform(get("/itemInsert/").with(csrf())).andReturn();
		@SuppressWarnings("unchecked")
		List<Middle> resultMiddleList=(List<Middle>)result.getModelAndView().getModel().get("middleList");
		assertEquals(resultMiddleList.get(0).getId(),0);
		assertEquals(resultMiddleList.get(0).getName(),"---");
		@SuppressWarnings("unchecked")
		List<Small> resultSmallList=(List<Small>)result.getModelAndView().getModel().get("smallList");
		assertEquals(resultSmallList.get(0).getId(),0);
		assertEquals(resultSmallList.get(0).getName(),"---");
		
		
		this.mockMvc.perform(get("/itemInsert/").with(csrf())).andExpect(model().attribute("bigList", bigList))
			.andExpect(view().name("add"));

	}
	
	@ParameterizedTest
	@ValueSource(strings = {"testItem", "111", ""})
	@DisplayName("/itemInsert/addを呼び出した場合のバリデーションチェック（nameの値を変更して検証）")
	public void nameTest(String name) throws Exception {
		InsertItemForm form=new InsertItemForm();
		form.setName(name);
		form.setConditionId("1");
		form.setCategory("1");
		form.setPrice("10");

		this.mockMvc.perform(post("/itemInsert/add").flashAttr("insertItemForm", form))
		.andExpect(model().hasNoErrors());
		
	}
	@ParameterizedTest
	@ValueSource(doubles = {0,0.29,0.3,1,9999999.9,10000000})
	@DisplayName("/itemInsert/addを呼び出した場合のバリデーションチェック（priceの値を変更して検証）")
	public void priceTest(Double price) throws Exception {
		InsertItemForm form=new InsertItemForm();
		form.setName("testItem");
		form.setConditionId("1");
		form.setCategory("1");
		form.setPrice(price.toString());
		
		this.mockMvc.perform(post("/itemInsert/add").flashAttr("insertItemForm", form))
		.andExpect(model().hasNoErrors());
		
	}
	@ParameterizedTest
	@ValueSource(strings = {"","0","1","10000"})
	@DisplayName("/itemInsert/addを呼び出した場合のバリデーションチェック（priceの値を変更して検証）")
	public void categoryTest(String category) throws Exception {
		InsertItemForm form=new InsertItemForm();
		form.setName("testItem");
		form.setConditionId("1");
		form.setCategory(category);
		form.setPrice("10");
		
		this.mockMvc.perform(post("/itemInsert/add").flashAttr("insertItemForm", form))
		.andExpect(model().hasNoErrors());
		
	}

}