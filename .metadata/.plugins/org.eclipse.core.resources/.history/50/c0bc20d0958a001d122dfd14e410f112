package com.example.demo.repository;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import com.example.demo.domain.Original;

@Repository
public class OriginalRepository {

	private static final RowMapper<Original> ORIGINAL_ROW_MAPPER = new BeanPropertyRowMapper<>(Original.class);

	private static final RowMapper<String> CATEGORY_NAME_ROW_MAPPER = (rs, i) -> {
		String categoryName = rs.getString("category_name");
		return categoryName;
	};

	private static final RowMapper<Integer> COUNT_ROW_MAPPER = (rs, i) -> {
		Integer count = rs.getInt("count");
		return count;
	};

	@Autowired
	private NamedParameterJdbcTemplate template;

	public Original load(int id) {
		String sql = "SELECT id,name,condition_id,category_name,brand,price,shipping,description FROM original WHERE id=:id ;";
		SqlParameterSource param = new MapSqlParameterSource().addValue("id", id);
		List<Original> originalList = template.query(sql, param, ORIGINAL_ROW_MAPPER);
		if (originalList.size() == 0) {
			return null;
		}
		return originalList.get(0);
	}

	public List<String> findByCategoryName() {
		String sql = "select distinct category_name from original ;";
		List<String> categoryNameList = template.query(sql, CATEGORY_NAME_ROW_MAPPER);
		return categoryNameList;

	}

	public Set<Original> findAll() {
		String sql = "SELECT id,name,condition_id,category_name,brand,price,shipping,description FROM original ;";
		List<Original> originalList = template.query(sql, ORIGINAL_ROW_MAPPER);
		System.out.println("List完成");
		Set<Original> originalSet = new HashSet<>(originalList);
		System.out.println("HashSet完成");
		for (Original original : originalSet) {
			System.out.println(original);
			break;
		}

		return originalSet;
	}

	public int countAll() {
		String sql = "SELECT count(*) FROM original;";
		SqlParameterSource param = new MapSqlParameterSource();
		Integer count = template.queryForObject(sql, param, COUNT_ROW_MAPPER);
		return count;
	}

}
