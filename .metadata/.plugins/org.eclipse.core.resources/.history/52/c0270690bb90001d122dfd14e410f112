package com.example.demo.controller;

import static org.mockito.Mockito.doReturn;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.example.demo.domain.Middle;
import com.example.demo.domain.Small;
import com.example.demo.service.ItemInsertService;
import com.example.demo.service.SelectCategoryService;
import com.example.demo.service.ShowDetailService;

@SpringBootTest
public class ItemInsertControllerTest {

	@MockBean
	private ItemInsertService insertService;

	@MockBean
	private ShowDetailService showDetailService;

	@MockBean
	private SelectCategoryService selectCategoryService;

	private MockMvc mockMvc;

	@Autowired
	WebApplicationContext webApplicationContext;

	@BeforeEach
	public void setup() {
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
	}
	
	@Test
	@DisplayName("/itemInsert/を呼び出した場合")
	public void indexSuccess() throws Exception { 
		doReturn("bigList").when(selectCategoryService).findBigAll();
		List<Middle> middleList = new ArrayList<>();
		Middle middle = new Middle();
		middle.setId(0);
		middle.setName("---");
		middleList.add(middle);
		List<Small> smallList = new ArrayList<>();
		Small small = new Small();
		small.setId(0);
		small.setName("---");
		smallList.add(small);
		this.mockMvc.perform(get("/itemInsert/"))
		.andExpect(model().attribute("bigList", "bigList"))
		.andExpect(model().attribute("middleList", middleList))
		.andExpect(model().attribute("smallList", smallList))
		.andExpect(view().name("add"));
		
	}

}